version: 2.1

description: |
  Simplify common tasks for building and testing Java projects using Maven.
  Source: https://github.com/circleci-public/circleci-orbs

examples:
  standard_maven_project:
    description: |
      If you have a standard maven project, you can use this orb to run through
      a common maven worklow. Without any additional configuration you can
      build, test, and automatically have your test results uploaded to CircleCI.
    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      workflows:
        maven_test:
          jobs:
            - maven/test

  custom_command:
    description: |
      You could run any custom maven command that you wish. In the example
      below we are running maven verify with debug mode enabled.

    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      workflows:
        maven_test:
          jobs:
            - maven/test:
                command: -X verify

  custom_test_results_path:
    description: |
      If your tests results are not in the default (target/surefire-reports)
      directory then you could add a custom directory.

    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      workflows:
        maven_test:
          jobs:
            - maven/test:
                test_results_path: /path/to/test/results

  custom_executor:
    description: |
      If you want to override the executor used by default.

    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      executors:
        my-executor:
          docker:
            - image: circleci/openjdk:9

      workflows:
        maven_test:
          jobs:
            - maven/test:
                executor: my-executor

  custom_settings_file:
    description: |
      If you want to use a custom maven settings file.

    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      workflows:
        maven_test:
          jobs:
            - maven/test:
                settings_file: ci-settings.xml

executors:
  maven:
    description: The docker container to use when running Maven builds
    docker:
      - image: circleci/openjdk:8-jdk-node

commands:
  with_cache:
    description: |
      Run a set of steps with Maven dependencies cached.

      This command will first restore a cache of maven dependencies, if one was
      saved by a previous build. The provided `steps` will then be executed, and
      if successful, then a fresh cache will be saved, if required.

      The contents of the `~/.m2` directory is cached, which will substantially
      improve build times for projects with many dependencies.

      The cache-key is generated from any files named `pom.xml` that are
      present in the `working_directory`.
    parameters:
      settings_file:
        description: Specify a custom settings file to use (optional)
        type: string
      steps:
        type: steps
      maven_command:
        description: Specify a custom path for invoking maven
        type: string
        default: mvn
    steps:
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
      - restore_cache:
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
      - when:
          condition: << parameters.settings_file >>
          steps:
            - run:
                name: Install Dependencies
                command: << parameters.maven_command >> dependency:go-offline --settings '<< parameters.settings_file >>'
      - unless:
          condition: << parameters.settings_file >>
          steps:
            - run:
                name: Install Dependencies
                command: << parameters.maven_command >> dependency:go-offline
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.m2
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
  process_test_results:
    description: |
      Upload test results.

      This will populate the Test Summary tab in the CircleCI UI. By default it will
      look in `target/surefire-reports` (the default location for maven test results).
      You can override where to find the test results with the path parameter.
    parameters:
      test_results_path:
        type: string
    steps:
      - store_test_results:
          path: << parameters.test_results_path >>

jobs:
  test:
    description: |
      Checkout, build, test, and upload test results for a Maven project.
    executor: <<parameters.executor>>
    parameters:
      executor:
        description: The name of custom executor to use
        type: executor
        default: maven
      command:
        description: The maven command to run.
        type: string
        default: verify
      test_results_path:
        description: The path to the test results.
        type: string
        default: target/surefire-reports
      settings_file:
        description: Specify a custom settings file to use (optional)
        type: string
      maven_command:
        description: Specify a custom path for invoking maven
        type: string
        default: mvn

    steps:
      - checkout
      - with_cache:
          settings_file: << parameters.settings_file >>
          maven_command: << parameters.maven_command >>
          steps:
            - when:
                condition: << parameters.settings_file >>
                steps:
                  - run:
                      name: Run Tests
                      command: << parameters.maven_command >> << parameters.command >> --settings '<< parameters.settings_file >>'
            - unless:
                condition: << parameters.settings_file >>
                steps:
                  - run:
                      name: Run Tests
                      command: << parameters.maven_command >> << parameters.command >>
      - process_test_results:
          test_results_path: << parameters.test_results_path >>


  parallel_test:
    description: |
      Checkout, build, test, and upload test results for a Maven project spreading tests across multiple nodes
    executor: <<parameters.executor>>
    parallelism: <<parameters.parallelism>>
    parameters:
      executor:
        description: The name of custom executor to use
        type: executor
        default: maven
      command:
        description: The maven command to run.
        type: string
        default: verify
      settings_file:
        description: Specify a custom settings file to use (optional)
        type: string
      maven_command:
        description: Specify a custom path for invoking maven
        type: string
        default: mvn
      test_results_path:
        description: The path to the test results.
        type: string
        default: target/surefire-reports
      parallelism:
        description: How many nodes should testing be split across?
        type: integer
        default: 2
      parallel_test_pattern:
        description: |
          This is the standard Surefire pattern, but you can override
          if you use alternate <includes> patterns in your pom.xml
        type: string
        default: "**/*Test*.java"
      parallel_it_pattern:
        description: |
          This is the standard Failsafe pattern, but you can override
          if you use alternate <includes> patterns in your pom.xml.
        type: string
        default: "**/*IT*.java"
      test_directory:
        description: If following standard maven conventions this does not need to be changed.
        type: string
        default: "src/test/java"
    steps:
      - checkout
      - run:
          name: Enable Test Splitting
          command: |
            echo -e "\033[31m\033[4mOrb Notes on Test Splitting\033[0m
            \033[34mCaveat 1:\033[0m  CircleCI Test Splitting uses filename by default, but JUnit reports use class names.
            Therefore this orb uses naive translation of linux file paths to dot separated package names and strips the .java suffix.

            \033[34mCaveat 2:\033[0m  Surefire and Failsafe both allow <includes> in pom configuration (which can come from parent projects).
            These values are appended to any -DincludeFiles argument (meaning it would still run all tests on every node).
            Therefore this orb will generate an exclusion list; a list of tests being run on the other nodes, and pass that to surefire/failsafe as an exclusion.

            \033[34mDebugging:\033[0m This orb will place all files used to decide tests in .circleci/tests and export it as an artifact for inspection/debugging.
            "
            mkdir -p .circleci/tests/

            # generate excluded surefire tests using provided pattern
            circleci tests glob <<parameters.test_directory>>/<<parameters.parallel_test_pattern>> | \
              sed -e 's#^<<parameters.test_directory>>/\(.*\)\.java#\1#' | \
              tr "/" "." > .circleci/tests/surefire_classnames
            cat .circleci/tests/surefire_classnames | \
              circleci tests split --split-by=timings --timings-type=classname > /tmp/this_node_tests
            cat .circleci/tests/surefire_classnames | \
              grep -xvf /tmp/this_node_tests > .circleci/tests/surefire_classnames_ignore_list

            # generate excluded failsafe tests using provided pattern
            circleci tests glob <<parameters.test_directory>>/<<parameters.parallel_it_pattern>> | \
              sed -e 's#^<<parameters.test_directory>>/\(.*\)\.java#\1#' | \
              tr "/" "." > .circleci/tests/failsafe_classnames
            cat .circleci/tests/failsafe_classnames | \
              circleci tests split --split-by=timings --timings-type=classname > /tmp/this_node_it_tests
            cat .circleci/tests/failsafe_classnames |  \
              grep -xvf /tmp/this_node_it_tests > .circleci/tests/failsafe_classnames_ignore_list
      - store_artifacts:
          path: .circleci/tests/
      - with_cache:
          settings_file: << parameters.settings_file >>
          maven_command: << parameters.maven_command >>
          steps:
            - when:
                condition: << parameters.settings_file >>
                steps:
                  - run:
                      name: Run Tests
                      command: << parameters.maven_command >> << parameters.command >> -Dsurefire.excludesFile=.circleci/tests/surefire_classnames_ignore_list -Dfailsafe.excludesFile=.circleci/tests/failsafe_classnames_ignore_list --settings '<< parameters.settings_file >>'
            - unless:
                condition: << parameters.settings_file >>
                steps:
                  - run:
                      name: Run Tests
                      command: << parameters.maven_command >> << parameters.command >> -Dsurefire.excludesFile=.circleci/tests/surefire_classnames_ignore_list -Dfailsafe.excludesFile=.circleci/tests/failsafe_classnames_ignore_list
      - process_test_results:
          test_results_path: << parameters.test_results_path >>
