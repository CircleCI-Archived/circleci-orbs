version: 2.1

description: |
  Deploy applications to AWS CodeDeploy. Source:
  https://github.com/circleci-public/circleci-orbs

examples:
  deploy_application:
    description: Deploy an application to AWS CodeDeploy
    usage:
      version: 2.1

      orbs:
        aws-code-deploy: circleci/aws-code-deploy@1.0.0

      workflows:
        deploy_application:
          jobs:
            - aws-code-deploy/deploy:
                application-name: myApplication
                deployment-group: myDeploymentGroup
                service-role-arn: myDeploymentGroupRoleARN
                bundle-bucket: myApplicationS3Bucket
                bundle-key: myS3BucketKey
  override_credentials:
    description: Deploy an application to AWS CodeDeploy with specific aws profile
    usage:
      version: 2.1

      orbs:
        aws-code-deploy: circleci/aws-code-deploy@1.0.0

      workflows:
        deploy_application:
          jobs:
            - aws-code-deploy/deploy:
                application-name: myApplication
                deployment-group: myDeploymentGroup
                service-role-arn: myDeploymentGroupRoleARN
                bundle-bucket: myApplicationS3Bucket
                bundle-key: myS3BucketKey
                arguments: '--profile assume_role'

orbs:
  aws-cli: circleci/aws-cli@0.1.6

commands:
  create-application:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      arguments:
        description: If you wish to pass any additional arguments to the aws deploy command
        type: string
        default: ''
    steps:
      - run:
          name: ensure-application-created
          command: |
            set +e
            aws deploy get-application --application-name << parameters.application-name >><<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>
            if [ $? -ne 0 ]; then
              set -e
              echo "No application named << parameters.application-name >> found. Trying to create a new one"
              aws deploy create-application --application-name << parameters.application-name >><<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>
            else
              set -e
              echo "Application named << parameters.application-name >> already exists. Skipping creation."
            fi

  create-deployment-group:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      service-role-arn:
        description:
          "The service role for a deployment group."
        type: string
      arguments:
        description: If you wish to pass any additional arguments to the aws deploy command
        type: string
        default: ''
    steps:
      - run:
          name: ensure-deployment-created
          command: |
            set +e
            aws deploy get-deployment-group \
              --application-name << parameters.application-name >> \
              --deployment-group-name << parameters.deployment-group >><<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>
            if [ $? -ne 0 ]; then
              set -e
              echo "No deployment group named << parameters.deployment-group >> found. Trying to create a new one"
              aws deploy create-deployment-group \
                --application-name << parameters.application-name >> \
                --deployment-group-name << parameters.deployment-group >> \
                --deployment-config-name << parameters.deployment-config >> \
                --service-role-arn << parameters.service-role-arn >><<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>
            else
              set -e
              echo "Deployment group named << parameters.deployment-group >> already exists. Skipping creation."
            fi

  push-bundle:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      bundle-source:
        description:
          "The directory relative to your project to package up into an application revision."
        type: string
        default: "."
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
      arguments:
        description: If you wish to pass any additional arguments to the aws deploy command
        type: string
        default: ''
    steps:
      - run:
          name: push-bundle
          command: |
            aws deploy push \
              --application-name << parameters.application-name >> \
              --source << parameters.bundle-source >> \
              --s3-location s3://<< parameters.bundle-bucket >>/<< parameters.bundle-key >>.<< parameters.bundle-type >><<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>

  deploy-bundle:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
      arguments:
        description: If you wish to pass any additional arguments to the aws deploy command
        type: string
        default: ''
    steps:
      - run:
          name: deploy-bundle
          command: |
            ID=$(aws deploy create-deployment \
                   --application-name << parameters.application-name >> \
                   --deployment-group-name << parameters.deployment-group >> \
                   --deployment-config-name << parameters.deployment-config >> \
                   --s3-location bucket=<< parameters.bundle-bucket >>,bundleType=<< parameters.bundle-type >>,key=<< parameters.bundle-key >>.<< parameters.bundle-type >> \
                   --output text \
                   --query '[deploymentId]'<<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>)

            STATUS=$(aws deploy get-deployment \
                      --deployment-id $ID \
                      --output text \
                      --query '[deploymentInfo.status]'<<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>)

            while [[ $STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" ]]; do
              echo "Status: $STATUS..."
              STATUS=$(aws deploy get-deployment \
                        --deployment-id $ID \
                        --output text \
                        --query '[deploymentInfo.status]'<<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>)
              sleep 5
            done

            if [[ $STATUS == "Failed" ]]; then
              echo "Deployment failed!"
              aws deploy get-deployment --deployment-id $ID<<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>
              exit 1
            else
              echo "Deployment finished."
              aws deploy get-deployment --deployment-id $ID<<# parameters.arguments >> << parameters.arguments >><</parameters.arguments >>
            fi

jobs:
  deploy:
    description:
      "Ensure an application and deployment group exists then proceed to
       bundle and upload an application revision to S3. Once uploaded this
       job will finally create a deployment based on that revision."
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      service-role-arn:
        description:
          "The service role for a deployment group."
        type: string
      bundle-source:
        description:
          "The directory relative to your project to package up into an application revision."
        type: string
        default: "."
      bundle-bucket:
        description:
          "The s3 bucket where an application's revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application's revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application's revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
      arguments:
        description: If you wish to pass any additional arguments to the aws deploy command
        type: string
        default: ''
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/configure
      - create-application:
          application-name: << parameters.application-name >>
          arguments: << parameters.arguments >>
      - create-deployment-group:
          application-name: << parameters.application-name >>
          deployment-group: << parameters.deployment-group >>
          deployment-config: << parameters.deployment-config >>
          service-role-arn: << parameters.service-role-arn >>
          arguments: << parameters.arguments >>
      - push-bundle:
          application-name: << parameters.application-name >>
          bundle-source: << parameters.bundle-source >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>
          bundle-type: << parameters.bundle-type >>
          arguments: << parameters.arguments >>
      - deploy-bundle:
          application-name: << parameters.application-name >>
          deployment-group: << parameters.deployment-group >>
          deployment-config: << parameters.deployment-config >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>
          bundle-type: << parameters.bundle-type >>
          arguments: << parameters.arguments >>
